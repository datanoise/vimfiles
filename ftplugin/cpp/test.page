
/*  -------------templateclass---------------                                              */
/* template                                                                                */
/*     <`templateParam^>                                                                   */
/* class `className^                                                                       */
/* {                                                                                       */
/* public:                                                                                 */
/*     `className^( `ctorParam^ );                                                         */
/*     ~`className^();                                                                     */
/*     `className^( const `className^ &cpy );                                              */
/*     `cursor^                                                                            */
/* private:                                                                                */
/* };                                                                                      */
/*                                                                                         */
/* // Scratch implementation                                                               */
/* // feel free to copy/paste or destroy                                                   */
/* template <`templateParam^>                                                              */
/* `className^<`_^cleanTempl(R('templateParam'))^^>::`className^( `ctorParam^ )            */
/* {                                                                                       */
/* }                                                                                       */
/*                                                                                         */
/* template <`templateParam^>                                                              */
/* `className^<`_^cleanTempl(R('templateParam'))^^>::~`className^()                        */
/* {                                                                                       */
/* }                                                                                       */
/*                                                                                         */
/* template <`templateParam^>                                                              */
/* `className^<`_^cleanTempl(R('templateParam'))^^>::`className^( const `className^ &cpy ) */
/* {                                                                                       */
/* }                                                                                       */



template
<templateParam>
class className
{
  public:
    className( ctorParam );
    ~className();
    className( const className &cpy );
    
  private:
};

// Scratch implementation
// feel free to copy/paste or destroy
  template <templateParam>
className<templateParam>::className( ctorParam )
{
}

  template <templateParam>
className<templateParam>::~className()
{
}

  template <templateParam>
className<templateParam>::className( const className &cpy )
{
}

template
<templateParam_TYPED>
class className_TYPED
{
  public:
    className_TYPED( ctorParam_TYPED );
    ~className_TYPED();
    className_TYPED( const className_TYPED &cpy );
    
  private:
};

// Scratch implementation
// feel free to copy/paste or destroy
  template <templateParam_TYPED>
className_TYPED<templateParam_TYPED>::className_TYPED( ctorParam_TYPED )
{
}

  template <templateParam_TYPED>
className_TYPED<templateParam_TYPED>::~className_TYPED()
{
}

  template <templateParam_TYPED>
className_TYPED<templateParam_TYPED>::className_TYPED( const className_TYPED &cpy )
{
}


/*  -------------Author--------------- */
/* `$author^                           */



drdr.xp

drdr.xp


/*  -------------forever--------------- */
/* for (;;) `body^                      */



for (;;) ;

for (;;) body_TYPED


/*  -------------namespace--------------- */
/* namespace `name^                       */
/* {                                      */
/*     `cursor^                           */
/* }                                      */



namespace name
{
  
}

namespace name_TYPED
{
  
}


/*  -------------try--------------- */
/* try                              */
/* {                                */
/*     `what^                       */
/* }`...^                           */
/* catch ( `except^ )               */
/* {                                */
/*     `handler^                    */
/* }`...^                           */
/* `catch...^catch ( ... )          */
/* {                                */
/*     \`cursor\^                   */
/* }^^                              */



try
{
  what
}
catch ( except )
{
  handler
}
catch ( except )
{
  handler
}
catch ( ... )
{
  
}

try
{
  what_TYPED
}_TYPED
catch_TYPED


/*  -------------inc--------------- */
/* include <`^.h>                   */



include <.h>

include <_TYPED.h>


/*  -------------ind--------------- */
/* include "`me^.h"                 */



include "test.h"

include "me_TYPED.h"


/*  -------------fun--------------- */
/* `int^ `name^(`_^^)               */
/* {                                */
/*     `cursor^                     */
/* }                                */



int name()
{
  
}

int_TYPED name_TYPED(__TYPED)
{
  
}


/*  -------------once--------------- */
/* #ifndef `symbol^                  */
/* #define `symbol^                  */
/* `cursor^                          */
/* #endif /* `symbol^ _cmt_          */



#ifndef __TEST_PAGE__
#define __TEST_PAGE__

#endif /* __TEST_PAGE__ */

#ifndef symbol_TYPED
#define symbol_TYPED

#endif /* symbol_TYPED */


/*  -------------invoke_--------------- */
/* `name^(`wrapped^)                    */


name(WRAPPED_TEXT)

name_TYPED(WRAPPED_TEXT)



/*  -------------forr---------------                             */
/* for (`int^ `i^ = `n^; `i^ >`=^ `end^; --`i^) `$BRACKETSTYLE^{ */
/*     `cursor^                                                  */
/* }                                                             */



  for (int i = n; i >= end; --i) 
{
  
}

for (int_TYPED i_TYPED = n_TYPED; i_TYPED >_TYPED end_TYPED; --i_TYPED) 
{
  
}


/*  -------------if---------------                      */
/* if (`condi^) `$BRACKETSTYLE^{                        */
/*   `job^                                              */
/* }`                                                   */
/* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
/*   \`cursor\^                                         */
/* }^^                                                  */



if (condi) 
{ 
  ;
}
else 
{ 
  
}

if (condi_TYPED) 
{ 
  job_TYPED
} 
else_TYPED


/*  -------------Date--------------- */
/* `date()^                          */



2009 May 10

2009 May 10


/*  -------------ifee---------------                                      */
/* if (`condition^) `$BRACKETSTYLE^{                                      */
/*   `job^                                                                */
/* }`                                                                     */
/* `...^ `$BRACKETSTYLE^else if (`cond^R("condition")^) `$BRACKETSTYLE^{  */
/*   `job^                                                                */
/* }`                                                                     */
/* `...^                                                                  */



if (condition) 
{
  ;
} 
else if (condition) 
{ 
  ;
} 
else if (condition) 
{ 
  ;
}

if (condition_TYPED) 
{
  job_TYPED
}
_TYPED


/*  -------------cc_--------------- */
/* `$CL^ `wrapped^ `$CR^            */


/* WRAPPED_TEXT */

/* WRAPPED_TEXT */



/*  -------------if0---------------                     */
/* if (0 == `var^) `$BRACKETSTYLE^{                     */
/*   `job^                                              */
/* }`                                                   */
/* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
/*   \`cursor\^                                         */
/* }^^                                                  */



if (0 == var) 
{ 
  ;
}
else 
{ 
  
}

if (0 == var_TYPED) 
{ 
  job_TYPED
} 
else_TYPED


/*  -------------ifndef--------------- */
/* ifndef `symbol^                     */
/* #    define `symbol^                */
/*                                     */
/* `cursor^                            */
/* #endif /* `symbol^ _cmt_            */



ifndef TEST 
#    define TEST 


#endif /* TEST */

ifndef SYMBOL_TYPED 
#    define SYMBOL_TYPED 


#endif /* SYMBOL_TYPED */


/*  -------------main--------------- */
/* int main(int argc, char *argv[])  */
/* {                                 */
/*     `cursor^                      */
/*     return 0;                     */
/* }                                 */



int main(int argc, char *argv[])
{
  
  return 0;
}

int main(int argc, char *argv[])
{
  
  return 0;
}


/*  -------------if_--------------- */
/* if (`condition^) {               */
/*   `wrapped^                      */
/* }                                */


if (condition) {
  WRAPPED_TEXT
}

if (condition_TYPED) {
  WRAPPED_TEXT
}



/*  -------------while0--------------- */
/* do `$BRACKETSTYLE^{                 */
/*   `cursor^                          */
/* } `$BRACKETSTYLE^while (`$FALSE^)   */



do 
{
  
} 
while ($FALSE)

  do 
{
  
} 
while (FALSE_TYPED)


/*  -------------Email--------------- */
/* `$email^                           */



  bal@bla

  bal@bla


/*  -------------try_--------------- */
/* try                               */
/* {                                 */
/*     `wrapped^                     */
/* }                                 */
/* `...^catch ( `except^ )           */
/* {                                 */
/*     `handler^                     */
/* }`...^                            */
/* `catch...^catch ( ... )           */
/* {                                 */
/*     \`cursor\^                    */
/* }^^                               */


  try
{
  WRAPPED_TEXT
}
catch ( except )
{
  handler
}catch ( except )
{
  handler
}
catch ( ... )
{
  
}


try
{
  WRAPPED_TEXT
}
_TYPED
catch_TYPED




/*  -------------do---------------      */
/* do `$BRACKETSTYLE^{                  */
/*   `cursor^                           */
/* } `$BRACKETSTYLE^while (`condition^) */



do 
{
  
} 
while (condition)

  do 
{
  
} 
while (condition_TYPED)


/*  -------------for---------------                           */
/* for (`int^ `i^ = `0^; `i^ < `len^; ++`i^) `$BRACKETSTYLE^{ */
/*     `cursor^                                               */
/* }                                                          */



  for (int i = 0; i < len; ++i) 
{
  
}

for (int_TYPED i_TYPED = 0_TYPED; i_TYPED < len_TYPED; ++i_TYPED) 
{
  
}


/*  -------------switch--------------- */
/* switch (`var^) `$BRACKETSTYLE^{     */
/*   case `_^ :                        */
/*     `job^                           */
/*     break;                          */
/*   `...^                             */
/*   case `_^ :                        */
/*     `job^                           */
/*     break;                          */
/*   `...^                             */
/*                                     */
/*   `default...^default:              */
/*     \`cursor\^^^                    */
/* }                                   */



switch (var) 
{
  case _ :
    ;
    break;

  case _ :
    ;
    break;

  case _ :
    ;
    break;


  default:
    
}

switch (var_TYPED) 
{
  case __TYPED :
    job_TYPED
        break;
    _TYPED 

        default_TYPED
}


/*  -------------ifn0---------------                    */
/* if (0 != `var^) `$BRACKETSTYLE^{                     */
/*   `job^                                              */
/* }`                                                   */
/* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
/*   \`cursor\^                                         */
/* }^^                                                  */



if (0 != var) 
{ 
  ;
}
else 
{ 
  
}

if (0 != var_TYPED) 
{ 
  job_TYPED
} 
else_TYPED


/*  -------------while1--------------- */
/* while (`$TRUE^) `$BRACKETSTYLE^{    */
/*   `cursor^                          */
/* }                                   */



while (true) 
{
  
}

while (true) 
{
  
}


/*  -------------class---------------                 */
/* class `className^                                  */
/* {                                                  */
/* public:                                            */
/*     `className^( `ctorParam^ );                    */
/*     ~`className^();                                */
/*     `className^( const `className^ &cpy );         */
/*     `cursor^                                       */
/* private:                                           */
/* };                                                 */
/*                                                    */
/* // Scratch implementation                          */
/* // feel free to copy/paste or destroy              */
/* `className^::`className^( `ctorParam^ )            */
/* {                                                  */
/* }                                                  */
/*                                                    */
/* `className^::~`className^()                        */
/* {                                                  */
/* }                                                  */
/*                                                    */
/* `className^::`className^( const `className^ &cpy ) */
/* {                                                  */
/* }                                                  */



class className
{
  public:
    className( ctorParam );
    ~className();
    className( const className &cpy );
    
  private:
};

// Scratch implementation
// feel free to copy/paste or destroy
className::className( ctorParam )
{
}

className::~className()
{
}

className::className( const className &cpy )
{
}

class className_TYPED
{
  public:
    className_TYPED( ctorParam_TYPED );
    ~className_TYPED();
    className_TYPED( const className_TYPED &cpy );
    
  private:
};

// Scratch implementation
// feel free to copy/paste or destroy
className_TYPED::className_TYPED( ctorParam_TYPED )
{
}

className_TYPED::~className_TYPED()
{
}

className_TYPED::className_TYPED( const className_TYPED &cpy )
{
}


/*  -------------ifn---------------                     */
/* if (`$NULL^ == `var^) `$BRACKETSTYLE^{               */
/*   `job^                                              */
/* }`                                                   */
/* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
/*   \`cursor\^                                         */
/* }^^                                                  */



if (NULL == var) 
{ 
  ;
}
else 
{ 
  
}

if (NULL == var_TYPED) 
{ 
  job_TYPED
} 
else_TYPED


/*  -------------ifproc_--------------- */
/* #if `cond^0^                         */
/* `wrapped^                            */
/* `else...^#else                       */
/* \`cursor\^^^                         */
/* #endif                               */


#if 0
WRAPPED_TEXT
#else

#endif

#if cond_TYPED
WRAPPED_TEXT
else_TYPED
#endif



/*  -------------ifnn---------------                    */
/* if (`$NULL^ != `var^) `$BRACKETSTYLE^{               */
/*   `job^                                              */
/* }`                                                   */
/* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
/*   \`cursor\^                                         */
/* }^^                                                  */



if (NULL != var) 
{ 
  ;
}
else 
{ 
  
}

if (NULL != var_TYPED) 
{ 
  job_TYPED
} 
else_TYPED


/*  -------------File--------------- */
/* `file()^                          */



test.page

test.page


/*  -------------cb--------------- */
/* `$CL^                           */
/*  `$CM^ `cursor^                 */
/*  `$CR^                          */



/*
 * 
 */

/*
 * 
 */


/*  -------------cc--------------- */
/* `$CL^ `cursor^ `$CR^            */



/*  */

/*  */


/*  -------------cd--------------- */
/* `$CL^`$CM^                      */
/*  `$CM^ `cursor^                 */
/*  `$CR^                          */



/**
 * 
 */

/**
 * 
 */


/*  -------------bitfield--------------- */
/* struct `structName^                   */
/* {                                     */
/*     `type^ `field^ : `bits^;`         */
/*     `...^                             */
/*     `type^ `field^ : `bits^;`         */
/*     `...^                             */
/* } `var^^;                             */



struct structName
{
  type field : bits;
  type field : bits;
  type field : bits;
} ;

struct structName_TYPED
{
  type_TYPED field_TYPED : bits_TYPED;
  _TYPED
} var_TYPED;


/*  -------------enum--------------- */
/* enum `enumName^                   */
/* {                                 */
/*     `elem^`                       */
/*     `...^,                        */
/*     `subElem^`                    */
/*     `...^                         */
/* } `var^^;                         */



enum enumName
{
  elem,
  subElem,
  subElem
} ;

enum enumName_TYPED
{
  elem_TYPED
      _TYPED
} var_TYPED;


/*  -------------cl--------------- */
/* `$CS^ `cursor^                  */



// 
//
// 
//

/*  -------------struct--------------- */
/* struct `structName^                 */
/* {                                   */
/*     `type^ `field^;`                */
/*     `...^                           */
/*     `type^ `field^;`                */
/*     `...^                           */
/* } `var^^;                           */



struct structName
{
  type field;
  type field;
  type field;
} ;

struct structName_TYPED
{
  type_TYPED field_TYPED;
  _TYPED
} var_TYPED;

