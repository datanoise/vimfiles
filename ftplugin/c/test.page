
/*  -------------cmt---------------  */
/* /**                               */
/*  * @author : `$author^ | `$email^ */
/*  * @description                   */
/*  *     `cursor^                   */
/*  * @return {`int^} `desc^         */
/*  _cmt_                            */



/**
 * @author : drdr.xp | bal@bla
 * @description
 *     
 * @return {int} desc
 */

/**
 * @author : drdr.xp | bal@bla
 * @description
 *     
 * @return {int_TYPED} desc_TYPED
 */


/*  -------------Author--------------- */
/* `$author^                           */



drdr.xp

drdr.xp


/*  -------------para--------------- */
/* @param {`Object^} `name^ `desc^   */



para

para


/*  -------------forever--------------- */
/* for (;;) `body^                      */



for (;;) /* void */;

for (;;) body_TYPED


/*  -------------assert--------------- */
/* assert(`isTrue^, "`text^");         */



assert(isTrue, "text");

assert(isTrue_TYPED, "text_TYPED");


/*  -------------inc--------------- */
/* include <`^.h>                   */



include <.h>

include <_TYPED.h>


/*  -------------ind--------------- */
/* include "`me^.h"                 */



include "test.h"

include "me_TYPED.h"


/*  -------------fun--------------- */
/*   `int^                          */
/* `name^(`_^)                      */
/* {                                */
/*   `cursor^                       */
/* }                                */



  int
name(_)
{
  
}

  int_TYPED
name_TYPED(__TYPED)
{
  
}


/*  -------------if_--------------- */
/* if (`condition^) {               */
/*   `wrapped^                      */
/* }                                */


if (condition) {
  WRAPPED_TEXT
}

if (condition_TYPED) {
  WRAPPED_TEXT
}



/*  -------------once--------------- */
/* #ifndef `symbol^                  */
/* #define `symbol^                  */
/* `cursor^                          */
/* #endif /* `symbol^ _cmt_          */



#ifndef __TEST_PAGE__
#define __TEST_PAGE__

#endif /* __TEST_PAGE__ */

#ifndef symbol_TYPED
#define symbol_TYPED

#endif /* symbol_TYPED */


/*  -------------invoke_--------------- */
/* `name^(`wrapped^)                    */


name(WRAPPED_TEXT)

name_TYPED(WRAPPED_TEXT)



/*  -------------forr---------------                        */
/* for (`i^ = `n^; `i^ >`^=^ `end^; --`i^) `$BRACKETSTYLE^{ */
/*   `cursor^                                               */
/* }                                                        */



  for (i = n; i >= end; --i) {
    
  }

for (i_TYPED = n_TYPED; i_TYPED >0_TYPED end_TYPED; --i_TYPED) {
  
}


/*  -------------if---------------                      */
/* if (`condi^) `$BRACKETSTYLE^{                        */
/*   `job^                                              */
/* }`                                                   */
/* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
/*   \`cursor\^                                         */
/* }^^                                                  */



if (condi) { 
  /* void */;
} else { 
  
}

if (condi_TYPED) { 
  job_TYPED
} 
else_TYPED


/*  -------------Date--------------- */
/* `date()^                          */



2009 May 10

2009 May 10


/*  -------------ifee---------------                                      */
/* if (`condition^) `$BRACKETSTYLE^{                                      */
/*   `job^                                                                */
/* }`                                                                     */
/* `...^ `$BRACKETSTYLE^else if (`cond^R("condition")^) `$BRACKETSTYLE^{  */
/*   `job^                                                                */
/* }`                                                                     */
/* `...^                                                                  */



if (condition) {
  /* void */;
} else if (condition) { 
  /* void */;
} else if (condition) { 
  /* void */;
}

if (condition_TYPED) {
  job_TYPED
}
_TYPED


/*  -------------cc_--------------- */
/* `$CL^ `wrapped^ `$CR^            */


/* WRAPPED_TEXT */

/* WRAPPED_TEXT */



/*  -------------if0---------------                     */
/* if (0 == `var^) `$BRACKETSTYLE^{                     */
/*   `job^                                              */
/* }`                                                   */
/* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
/*   \`cursor\^                                         */
/* }^^                                                  */



if (0 == var) { 
  /* void */;
} else { 
  
}

if (0 == var_TYPED) { 
  job_TYPED
} 
else_TYPED


/*  -------------ifndef--------------- */
/* ifndef `symbol^                     */
/* #    define `symbol^                */
/*                                     */
/* `cursor^                            */
/* #endif /* `symbol^ _cmt_            */



ifndef TEST 
#    define TEST 


#endif /* TEST */

ifndef SYMBOL_TYPED 
#    define SYMBOL_TYPED 


#endif /* SYMBOL_TYPED */


/*  -------------main--------------- */
/*   int                             */
/* main(int argc, char **argv)       */
/* {                                 */
/*   `cursor^                        */
/*   return 0;                       */
/* }                                 */



  int
main(int argc, char **argv)
{
  
  return 0;
}

  int
main(int argc, char **argv)
{
  
  return 0;
}


/*  -------------filehead---------------                                  */
/* /**-------------------------/// `sum^ \\\---------------------------   */
/*  *                                                                     */
/*  * <b>`function^</b>                                                   */
/*  * @version : `1.0^                                                    */
/*  * @since : `strftime("%Y %b %d")^                                     */
/*  *                                                                     */
/*  * @description :                                                      */
/*  *   `cursor^                                                          */
/*  * @usage :                                                            */
/*  *                                                                     */
/*  * @author : `$author^ | `$email^                                      */
/*  * @copyright `.com.cn^                                                */
/*  * @TODO :                                                             */
/*  *                                                                     */
/*  *--------------------------\\\ `sum^ ///---------------------------_cmt_ */



/**-------------------------/// sum \\\---------------------------
 *
 * <b>function</b>
 * @version : 1.0
 * @since : 2009 May 10
 * 
 * @description :
 *   
 * @usage : 
 * 
 * @author : drdr.xp | bal@bla
 * @copyright .com.cn 
 * @TODO : 
 * 
 *--------------------------\\\ sum ///---------------------------*/

/**-------------------------/// sum_TYPED \\\---------------------------
 *
 * <b>function_TYPED</b>
 * @version : 10_TYPED
 * @since : 2009 May 10
 * 
 * @description :
 *   
 * @usage : 
 * 
 * @author : drdr.xp | bal@bla
 * @copyright comcn_TYPED 
 * @TODO : 
 * 
 *--------------------------\\\ sum_TYPED ///---------------------------*/


/*  -------------while0--------------- */
/* do `$BRACKETSTYLE^{                 */
/*   `cursor^                          */
/* } `$BRACKETSTYLE^while (`$FALSE^)   */



do {
  
} while (0)

do {
  
} while (0)


/*  -------------Email--------------- */
/* `$email^                           */



bal@bla

bal@bla


/*  -------------do---------------      */
/* do `$BRACKETSTYLE^{                  */
/*   `cursor^                           */
/* } `$BRACKETSTYLE^while (`condition^) */



do {
  
} while (condition)

do {
  
} while (condition_TYPED)


/*  -------------for---------------                     */
/* for (`i^ = `0^; `i^ < `len^; ++`i^) `$BRACKETSTYLE^{ */
/*   `cursor^                                           */
/* }                                                    */



for (i = 0; i < len; ++i) {
  
}

for (i_TYPED = 0_TYPED; i_TYPED < len_TYPED; ++i_TYPED) {
  
}


/*  -------------switch--------------- */
/* switch (`var^) `$BRACKETSTYLE^{     */
/*   case `_^ :                        */
/*     `job^                           */
/*     break;                          */
/*   `...^                             */
/*   case `_^ :                        */
/*     `job^                           */
/*     break;                          */
/*   `...^                             */
/*                                     */
/*   `default...^default:              */
/*     \`cursor\^^^                    */
/* }                                   */



switch (var) {
  case _ :
    /* void */;
    break;

  case _ :
    /* void */;
    break;

  case _ :
    /* void */;
    break;


  default:
    
}

switch (var_TYPED) {
  case __TYPED :
    job_TYPED
        break;
    _TYPED 

        default_TYPED
}


/*  -------------ifn0---------------                    */
/* if (0 != `var^) `$BRACKETSTYLE^{                     */
/*   `job^                                              */
/* }`                                                   */
/* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
/*   \`cursor\^                                         */
/* }^^                                                  */



if (0 != var) { 
  /* void */;
} else { 
  
}

if (0 != var_TYPED) { 
  job_TYPED
} 
else_TYPED


/*  -------------while1--------------- */
/* while (`$TRUE^) `$BRACKETSTYLE^{    */
/*   `cursor^                          */
/* }                                   */



while (1) {
  
}

while (1) {
  
}


/*  -------------ifn---------------                     */
/* if (`$NULL^ == `var^) `$BRACKETSTYLE^{               */
/*   `job^                                              */
/* }`                                                   */
/* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
/*   \`cursor\^                                         */
/* }^^                                                  */



if (NULL == var) { 
  /* void */;
} else { 
  
}

if (NULL == var_TYPED) { 
  job_TYPED
} 
else_TYPED


/*  -------------ifproc_--------------- */
/* #if `cond^0^                         */
/* `wrapped^                            */
/* `else...^#else                       */
/* \`cursor\^^^                         */
/* #endif                               */


#if 0
WRAPPED_TEXT
#else

#endif

#if cond_TYPED
WRAPPED_TEXT
else_TYPED
#endif



/*  -------------ifnn---------------                    */
/* if (`$NULL^ != `var^) `$BRACKETSTYLE^{               */
/*   `job^                                              */
/* }`                                                   */
/* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
/*   \`cursor\^                                         */
/* }^^                                                  */



if (NULL != var) { 
  /* void */;
} else { 
  
}

if (NULL != var_TYPED) { 
  job_TYPED
} 
else_TYPED


/*  -------------File--------------- */
/* `file()^                          */



test.page

test.page


/*  -------------cb--------------- */
/* `$CL^                           */
/*  `$CM^ `cursor^                 */
/*  `$CR^                          */



/*
 * 
 */

/*
 * 
 */


/*  -------------cc--------------- */
/* `$CL^ `cursor^ `$CR^            */



/*  */

/*  */


/*  -------------cd--------------- */
/* `$CL^`$CM^                      */
/*  `$CM^ `cursor^                 */
/*  `$CR^                          */



/**
 * 
 */

/**
 * 
 */


/*  -------------bitfield--------------- */
/* struct `structName^                   */
/* {                                     */
/*     `type^ `field^ : `bits^;`         */
/*     `...^                             */
/*     `type^ `field^ : `bits^;`         */
/*     `...^                             */
/* } `var^^;                             */



struct structName
{
  type field : bits;
  type field : bits;
  type field : bits;
} ;

struct structName_TYPED
{
  type_TYPED field_TYPED : bits_TYPED;
  _TYPED
} var_TYPED;


/*  -------------enum--------------- */
/* enum `enumName^                   */
/* {                                 */
/*     `elem^`                       */
/*     `...^,                        */
/*     `subElem^`                    */
/*     `...^                         */
/* } `var^^;                         */



enum enumName
{
  elem,
  subElem,
  subElem
} ;

enum enumName_TYPED
{
  elem_TYPED
      _TYPED
} var_TYPED;


/*  -------------cl--------------- */
/* `$CS^ `cursor^                  */



// 
//
// 
//

/*  -------------struct--------------- */
/* struct `structName^                 */
/* {                                   */
/*     `type^ `field^;`                */
/*     `...^                           */
/*     `type^ `field^;`                */
/*     `...^                           */
/* } `var^^;                           */



struct structName
{
  type field;
  type field;
  type field;
} ;

struct structName_TYPED
{
  type_TYPED field_TYPED;
  _TYPED
} var_TYPED;

