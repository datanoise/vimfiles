*XPTemplate*	For Vim version 7.2. Last change: 2009 Apr 16
*xptemplate*
*xpt*


			XP's Snippet Template engine
								    by drdr.xp
							     drdr.xp@gmail.com

	Generate customizable code snippets automatically.

	|xpt-install|
	|xpt-usage|
	|xpt-feature|
	|xpt-option|
	|xpt-key-bind|
	|xpt-api|
	|xpt-changes-log|

								 *xpt-install*
	Copy files and directories into one of your |runtimepath|s.

							       *xpt-uninstall*
	Not implemented
	:XPTuninstall

								   *xpt-usage*
	In insert mode, after typed key of a template, pressing <C-\> to
	generate a snippet. Using <Tab> to navigate through snippet template.
	For examle, vim xpt.c, : >
		for<C-\>
<	Generates : >
		for (i = `0^; i < `len^; ++i){
		  `cursor^
		}
<	"i" being selected is the current item you are editing. `0^ is next
	item,  and you can navigate to it by typing <Tab> |xpt-navigate-key|.

	NOTE in some European keyboard, <C-\> does NOT work. If it does not
	work, you need to specify another key for triggering snippets, see
	|g:xptemplate_key|.

	Now type "abcdefg", this snippet result in : >
		for (abcdefg = `0^; abcdefg < `len^; ++abcdefg){
		  `cursor^
		}
<	Now press <Tab>, cursor will jumps to next item "0": >
		for (abc = 0; abc < `len^; ++abc){
		  `cursor^
		}
<
	More usages are described blow:

								 *xpt-feature*
	On time typing update
	Popup hint					|xpt-hint|
	Context sensitive template generation		|xpt-context|
	Template priority				|xpt-priority|
	High light currently typed item
	Embedded functions and variables		|xpt-function|
	Repeatable template generation			|xpt-repeatable|
	Nested template					|xpt-nested|
	Wrapping template				|xpt-wrapped|
	Auto indent					|xpt-auto-indent|
	Cursor position helper				|xpt-cursor-protection|
	Named item or anonymous item			|xpt-item|
	Alternative item default value			|xpt-default-value|
	and more......

								*xpt-priority*
	Template is defined with a certain priority. One buffer might load
	templates with same name. Only the template with smallest priority can
	work, others are ignored. 
	Priority can be valued from 0 to +oo. 0 is the highest priority.
	Some predefined symbols stand for number priority values : >
		all		: 64
		spec		: 48
		like		: 32
		lang		: 16
		sub		: 8
		personal	: 0
<	Default priority is "lang" or 16. 
	
	You can set priority for each template by using |xpt-priority-format|.
	Or set priority for all templates in current file with
	|XPTemplatePriority()|.

							 *xpt-priority-format*
	Priority setting format : "templateName[!priority[+/-offset]]".
	Following format are all valid : >
	call XPTemplate('name!3', '...')		3
	call XPTemplate('name!lang', '...')		0
	call XPTemplate('name!like+4', '...')		36 // like=32
	call XPTemplate('name!all-', '...')		63 // all=64
<

						      *xpt-popup*   *xpt-hint*
	If you type nothing or incompleted template key and press <C-\>, a
	popup menu shows up listing all possible template key. For example : >
		fo<C-\>
<	Shows : >
		for
		forr
<
	After select the item from popup menu, press <C-\> again to trigger
	template

							      *xpt-nested*
	Template can expand inside another template. There is no difference
	between using a nested template or top-level template.
	For example, when you edit xp.c . type siwtch<C-\>, generate a switch
	block template: >
		switch (fn) {
		  case 0 :
			<--------------cursor stops here
		    break;
		    `...^
		  default:
			`^
		}
<	Now the cursor stops between "case 0 :" and "break;", type : >
		if<C-\>
<	It becomes : >
		switch (fn) {		# upper level template
		  case 0 :		#
		    if (){		. nested template
		      `cursor^		.
		    }			.
		    break;		# upper level template
		    `...^               #
		  default:              #
			`^              #
		}                       #
<	Type <Tab>, <Tab>.. to navigate out of the nested template : >
		switch ("xp.c" == fn) {
		  case 0 :
		    if (){

		    }
		    break;

		  default:
			<--------------cursor stops here
		}
<	Now cursor stops after "default:", and we get out back to the "switch"
	template
							      *xpt-auto-indent*
	Template is autdo indented when the first time it shows up on screen,
	your typing in template and after template rendering.

==============================================================================

								     *xpt-api*
	Templates are defined in filetype plugins. You can find them all in
	ftpplugin/**/*.template.vim
	You can add new template just by creating another ftplugin file.
	And you can include other template file in your template file. see
	|xpt-include|.

	Define new template is easy, for example : >
		call XPTemplate("inc", 'include <`^.h>')
<	Defines the "include" template. Item quoted by |`| and |^| are
	replaced by user typing. Function maybe used in ftplugin
	scripts:
	|XPTemplate()|		define new template
	|XPTemplateIndent()|	define indent option to current buffer
	|XPTemplateMark()|	define new template mark in current buffer
	|XPTfuncs()|		get function container
	|XPTvars()|		get variable container


								 *xpt-include*
	You can include another template file in any *.template.vim file : >
		runtime ftplugin/_common/common.template.vim
<
							 *xpt-common-template*
	"common" template defines templates and function and variables  maybe
	used somewhere else. And itself is a sample of how to use variables and
	function in template.

						     *xpt-define-new-template*
								    *xpt-item*
	In defining template, you have to specify in template which part can
	be edit by user, that is done by quoting part of template by mark.
	By default, the left mark is |`|, the right mark is |^|. for example : >
		call XPTemplate("for", ""
		      \."for (`i^ = `0^; `i^ < `len^; ++`i^){\n"
		      \."  `cursor^\n"
		      \."}")
<	This defines for loop template for c language. In it there are 4 item
	can be edited : >
		i, 0, len, cursor
<	For more infomation about item, see |xpt-item-format|

							*`*   *^*   *xpt-mark*
	Default template mark to specify the editable part of a template. They
	can be changed locally(to current buffer) by calling |XPTemplateMark()|.

							     *xpt-item-format*
	Item is composed as follow :
	|`| |xpt-item-name| |^| [|xpt-default-value| |^| [|^|]]

					  *xpt-predefined*     *xpt-item-name*
	Item name is the text between |`| and |^|. It can be plain text,
	|xpt-variable|, |xpt-function|. But can NOT be mixed and you will
	never need mixed item :).
	Before you can jump to the first item, all items of |xpt-variable|
	and |xpt-function| will be evaluated.

						*```*   *xpt-```*   *xpt-edge*
	|xpt-item-name| can be defined with "edge". Edge is some text around
	item name that is not selected when cursor <tab> to this item. But it
	still can be edit. For example : >
		`(`xpt`)^
<	This item named of "xpt" and the edges are "(" and ")", When cursor
	jumps onto it : >
		(xpt)
		 ***------ only xpt is selected
<	Edge helps on formatting expandable items. 

	NOTE only |\_W| characters are acceptable in edge.
	

							   *xpt-format-normal*
	Normal format is |`| |xpt-item-name| |^|. As you navigate to such an
	item, |xpt-item-name| is evaluated and selected as default value.

							  *xpt-format-default*
	|`| |xpt-item-name| |^| |xpt-default-value| |^| is default value
	format let you specify some other text as default value when navigated
	to this item. |xpt-default-value| can be plain text, |xpt-variable|,
	|xpt-function| or mixed.

						      *xpt-format-post-filter*
	Delayed default value format :
	|`| |xpt-item-name| |^| |xpt-post-filter| |^| |^|

	It is similar with |xpt-format-default|. The only difference is when
	you jump to such item, |xpt-item-name| is selected and you can edit as
	well. Like |xpt-format-normal|. But when you jumps to next item , the
	|xpt-post-filter| applied and evaluated text replaces the left text. 


							   *xpt-default-value*
	By default, an Item being selected uses its name as the default value,
	but you have a chance to choose other text as default value, and it is
	easy to be done: fill the text following the item and end it with
	right mark |^| : >
		`item_name^default_value^
<	The default value can be plain text, |xpt-variable|, |xpt-function| or
	mixed. For example : >
		call XPTemplate("ind", 'include "`^fileRoot()^.h"')
<	In upper case, the unnamed item with an alternative default value
	defined by a function. see |xpt-function|.
	Example : type "#ind<C-\>": >
		#include "current_file_name.h"
<
							    *xpt-post-filter*
	Post filter can be plain text, |xpt-varaible|, |xpt-function| or
	mixed.  See |xpt-format-post-filter|.
	Some usually-used post filters are defined in
	ftplugin/common/common.xpt.vim. for |xpt-substitute| with name of 'S'.
	For example for c language, "ifndef" template defined as follow: : >
		call XPTemplate("ifndef", [
		      \"ifndef `_^S('.','\\u&')^^", 
		      \"#    define `_^", 
		      \"", 
		      \"`cursor^", 
		      \"#endif /* `_^ */"
		      \])
<	When you pressing <tab> from the first item "_", typed content are
	made upper case.  : >
		#ifndef __gnu__
		#    define __gnu__
		`cursor^
		#endif /* __gnu__ */
<	Pressing <tab> results in : >
		#ifndef __GNU__
		#    define __GNU__
		`cursor^
		#endif /* __GNU__ */
<
						      *S()*   *xpt-substitute*
S({pattern},{replace},[{flag}])
	Substitue typed content with pattern and replace. Just like
	|substitute()|.


						     *`cursor^*   *xpt-curosr*
	The item of name "cursor" is a special one. It always is selected at
	last and replaced with empty string. When navigate to "cursor" item,
	template is complete.

						     *`^*    *xpt-unmaed-item*
	You can specify unnamed item bu just leave the name empty, : >
		call XPTemplate("fun", [
		      \"  `int^",
		      \"`name^(`^)",
		      \"{",     \__________unnamed item
		      \"  `cursor^",
		      \"}"
		      \])
<	The function parameter is a unnamed item. Each unnamed item is a
	unique one and different unnamed items will not be treated as with the
	same name : empty string.

						  *\w\+...*   *xpt-expandable*
	One of |xpt-post-filter| usages is to define expandable item. When
	<tab> is pressed, post-filter applied and replace the item text with
	what post filter evaluated to be. |xpt-repeatable| is implemented with
	|xpt-expandable|.

	Expandable item must be with name of "\w\+\.\.\." to be able to
	expand. For example : >
		call XPTemplate('if', [
		      \ 'if (`condi^) {', 
		      \ '  `_^', 
		      \ '}', 
		      \ '`else...^else {',    | the expandalbe item
		      \ '  \`cursor\^',  
		      \ '}^^'
		      \])
<	Only when item is not modified post filter can be applied to item. Or
	|xpt-expandable| is treated as a normal one without post filter.


					 *`...n^*  *`...^*    *xpt-repeatable*
	Some segment can be defined as repeatable, for example the "case"s in
	"switch". To specify the repeatable part is easy, just wrap the part
	you want it to repeat with `...n^ . n is a number and can be omitted.
	Take the case from "switch": >
		call XPTemplate('switch', [
		      \ 'switch (`^) {',
		      \ '  `...^',            | repeatable part
		      \ '  case `^0^ :',      |
		      \ '    `^',             |
		      \ '    break;',         |
		      \ '  `...^',            |
		      \ '',
		      \ '  default:',
		      \ '    `^',
		      \ '}'
		      \])
<
	When you trigger a repeatable template, it works as below : >
		switch () {    <-------cursor stays here,
		  `...^

		  default:
		      `^
		}
<	Press <tab>, the |`...^| is selected. Press <tab> again to expand
	repetition part. Or press <cr> |s_CR| to cancel repetition part. These
	4 lines are expanded, : >
		switch () {

		  case `17^ :       | expanded
		    `^              |
			break;      |
		    `...^           |

		  default:
			`^
		}
<	Enter the repeatable part. You may have noticed there is another
	|`...^|, that is the another repeat trigger.

	Press <tab> 3 times : >
		switch () {

		  case 0 :

		    break;

		  case `20^ :      | selected repeatable part
		    `^             |
			break;     |
		    `...^          |

		  default:
			`^
		}
<	More than abore, Using |`...n^| let you define multiple repetition parts in
	one snippet. : >
		call XPTemplate( "tryof", [
		      \ "try `what^",
		      \ "   `pattern^ ->",
		      \ "       `body^ `...0^;",
		      \ "   `patternn^ ->",     
		      \ "       `bodyn^`...0^",  
		      \ "catch",
		      \ "    `excep^ -> `toRet^ `...1^;",
		      \ "    `except^ -> `toRet^`...1^", 
		      \ "end `cursor^",
		      \ "" ] )
<
	Repetition part can NOW be recursively defined. See *.html "table2"
	template : >
		call XPTemplate('table2', [
		      \ '<table>',
		      \ '  <tr>',
		      \ '    <td>`text^^</td>`...2^', 
		      \ '    <td>`text^^</td>`...2^', 
		      \ '  </tr>`...0^', 
		      \ '  <tr>',
		      \ '    <td>`text^^</td>`...1^', 
		      \ '    <td>`text^^</td>`...1^', 
		      \ '  </tr>`...0^', 
		      \ '</table>'
		      \])
<

						   *`wrapped^*   *xpt-wrapped*
	Define the template : >
		call XPTemplate('invoke_', [
		      \ '`name^(`wrapped^)'
		      \])             \_______wrapped item
<	And in a file use |V| to select some text, press<C-\> |v_CTRL-\|. The
	selected text is yanked and removed, A popup menu appears to let you
	select template name. : >
		a, b
	press V to select this line,<C-\>, in popup, select "invoke_", it
	shows:
		name(a, b)
<	Now edit the name.

					       *xpt-function*   *xpt-variable*
	You can use 2 global function |XPTfuncs()| |XPTvars()| to get function
	or variable container for defining functions or variables used as
	|xpt-predefined|, |xpt-default-value| or |xpt-post-filter|. as : >

<	Normally variables are template-relevent and used format helper like
	"$CL" and "$CR" defined as "/*" and "*/" for c language.

	Personal information variables should be defined by using
	|g:xptemplate_vars|. Variables defined with |g:xptemplate_vars|
	override variables defined in *.xpt.vim.

	Functions used in |xpt-default-value| or |xpt-post-filter| are invoked
	with 1 parameter more, than parameters specified in template.
	The additional parameter is |Dictionary| context, with information
	of current template or item. : >
		used in:	predefined	default-value	post-filter
	key:
	tmpl(Dic)		*		*		*
	name(string)		-		*		*
	value(string)		-		-		*
<	
	Supposed we have a function defined as follow : >
		fun! s:f.SV(ptn, rep, ...)
		  let flg = a:0 >= 1 ? a:1 : 'g'
		  return substitute(self.V(), a:ptn, a:rep, flg)
		endfunction

<	It accepts upto 3 arguments. An example is as follow : >
		call XPTemplate("ifndef", [
		      \"ifndef `_^SV('.','\\u&')^^", 
		      ......
<	It converts typed text to upper case.


				      *xpt-{}*  *xpt-mixed*   *xpt-expression*
	xpt expression used as |xpt-default-value| or |xpt-post-filter| in
	template can be mixed with plain text, |xpt-variable| and
	|xpt-function|. 

	Function can be template function defined within |XPTfuncs()| or vim
	native function.

	Function can recursively called.

	Function is called within a |Dictionary|, through which you can access
	other template function or template rendering context
	|xpt-function-ctx|

	Function or variable can be enclosed with "{}" to prevent function or
	variable names confused with surrounded plain text.

	Function can be prevented from being evaluated by escaping the "()". : >
		S\(S("abc", '.', '\u&'))
<	is evaluated to be : >
		S(ABC)
<
	Variable can be prevented from being evaluated by escaping the '$'. : >
		\$authoer
<	is evaluated to be : >
		$author
<	
	To escaping the "{}" : >
		\{S("abc", '.', '\u&')}
<	is evaluated to be : >
		{ABC}
<	As : >
		{S("abc", '.', '\u&')}
<	is evaluated to be : >
		ABC
<	
	Example of file name of upper case, supposing you are editing a file
	named of "your_file_name.ext" : >
		__{S(E("%:t"),".","\\u&")}__
<	is evaluated to be : >
		__YOUR_FILE_NAME.EXT__
<	And : >
		this is S($author,".","-&")-
<	is evaluated to be : >
		this is -d-r-d-r-.-x-p-
<
					       *self._ctx*  *xpt-function-ctx*
	template context can be accessed from within |xpt-function|. For
	example the reference function: >
		fun! s:f.R(name) "{{{
		  let ctx = self._ctx
		  if has_key(ctx.namedStep, a:name)
		    return ctx.namedStep[a:name]
		  endif

		  return a:ctx.name
		endfunction "}}}
<


									 *C()*
	Get function context, see |xpt-function-ctx|
								   *E({expr})*
	Equals to |expand()|
									 *N()*
	Current edited item name. Valid only to |xpt-post-filter|.
									 *V()*
	Current typed text. Valid only to |xpt-post-filter|.
								   *R({name})*
	Reference to history item. Get value by name.
					       *S({expr},{pat},{sub},{flags})*
	Equals to |substitute()|.
									*SV()*
	Euqals to S(V(),{pat},{sub},{flag})

								 *xpt-context*
	You can define template that can only be triggered at certain
	circumstancesstances. For example in certain syntax.
	Defining context denpended template is by adding another parameter to
	XPTemplate call "{'syn' : 'the context name'}" : >
		call XPTemplate("para", {'syn' : 'comment'}, "
			\@param {`Object^} `name^ `desc^")
<	Now only in syntax of name like "comment", template "para" can be
	triggered.

								*XPTemplate()*
XPTemplate({name}, [, {context}], {template})
	"XPTemplate" defines a template to current buffer. It takes 2 or 3
	parameters:
	{name} is string representing the key to trigger this template.
	{context} can be omit or an |Dictionary| defines where this template
	can be triggered. For now only "syn" is supported.
	{template} can be string or |List|. |List| will be joined with "\n"
	forming a template string. This saves you adding "\n" to each line.

							    *XPTemplateMark()*
XPTemplateMark({leftmark}, {rightmark})
	XPTemplateMark defines what chars are used as item quoter. It only
	takes effect to current buffer. See |xpt-mark|.

	NOTE this function affects only to current script and current buffer.

							*XPTemplatePriority()*
XPTemplatePriority({priority})
	XPTemplatePriority set default priority for only current *.xpt.vim
	script and current buffer. See |xpt-priority|

	NOTE this function affects only to current script and current buffer.





					   *XPTemplateIndent()*   *xpt-indent*
							      {default:"auto"}
XPTemplateIndent({indentOption})
	XPTemplateIndent set indent option to current buffer. {indentOption}
	can be :
	"auto" : indent lines in snippet with default indent options. see
	|indent.txt|.
	"keep" : keep indent.
	"/n[*n]" : multiple indent space. If "*n" not presented, 'shiftwidth'
	is used.

	Indent setting can also be applied to a certain template by using this
	format : >
		call XPTemplate("main=/2*16", [...
		call XPTemplate("main=/2", [...       // using shiftwidth
<





						      *XPTfuncs()* *XPTvars()*
g:XPTfuncs()   g:XPTvars()
	g:XPTfuncs() returns a |Dictionary| container of functions can be used
	in template in current buffer. The normal using of g:XPTfuncs() to
	define a template function is : >
		let s:f = g:XPTfuncs()

		fun! s:f.date() dict
		  return strftime("%Y %b %d")
		endfunction
<
	g:XPTvars() returns a |Dictionary| container of variables can be used
	in template in current buffer. For example : >
		let s:v = g:XPTvars()

		let s:v['$author'] = "drdr.xp"
<
	Now  can use function or variables in template : >
	call XPTemplate("filehead", [
	      \'/**--------------------/// `sum^ \\\----------------------',
	      \' *',
	      \' * @version : `1.0^',
	      \' * @since : `date()^',
	      \' * @author : `$author^ | `$email^',
	      \' * @copyright `.com.cn^ ',
	      \' * @TODO : ',
	      \' * ',
	      \' *---------------------\\\ `sum^ ///----------------------*/',
	      \''])
<
==============================================================================

								*xpt-key-bind*
	Default key binds to trigger template are |i_CTRL-\| and |v_CTRL-\|.
	And with |g:xptemplate_key| option you can override them.

								    *i_CTRL-\*
	Trigger template in insert mode.
								    *v_CTRL-\*
	Trigger template with selected text in visual mode. Text you selected
	will be wrapped within "wrapped" item. See |xpt-wrapped|

					*xpt-navigate-key*   *i_TAB*   *s_TAB*
	Navigate to next item.

							  *xpt-clear*   *s_CR*
	Clear current item and jump to next.
								    *s_CTRL-l*
	Jump to the end of current item in insert mode.

==============================================================================

								  *xpt-option*
	Options can be set in |.vimrc| to modify xptemplate behavior.

							    *g:xptemplate_key*
							       {default:<C-\>}
	The key to trigger template. See |i_CTRL-\| |v_CTRL-\|.

						       *g:xptemplate_nav_next*
							       {default:<tab>}
	After template triggerred, to press which key to navigate to next.

						     *g:xptemplate_nav_cancel*
								{default:<cr>}
	After template triggerred, to press which key to clear current item
	and jump to next.

						       *g:xptemplate_to_right*
							     {default:"<C-l>"}
	Change the default key |s_CTRL-l| to jump to item end in |Select-mode|.

						     *g:xptemplate_strip_left*
								   {default:1}
	When set, wrapping template |xpt-wrapped| removes space before line.

			 *xpt-cursor-protection*   *g:xptemplate_limit_curosr*
								   {default:1}
	When set, cursor is hold where it should be, but this will slow down
	a bit template rendering.

						      *g:xptemplate_highlight*
								   {default:1}
	When set, items with the same name of current item is highlighted.


						     *g:xptemplate_show_stack*
								   {default:1}
	When set, at the left of |statusline|, nested template |xpt-nested|
	are showed : >
		XPT:for[len] > if[]
<	Indicate rendering template "if" inside template "for".

							     *g:xptemplate_hl*
								   {default:1}
	Whether to highlight currently editing item. See |xpt-highlight|.

				      *xpt-personal-var*   *g:xptemplate_vars*
	Set personal variables used in template, see |xpt-variable|. Variable
	set with g:xptemplate_vars has the highest priority and override any
	other variables set in *.xpt.vim.  Variables
	format : >
	let g:xptemplate_vars = '$author=xp\ \&\\\&123&$email=bal@bla'
	let g:xptemplate_vars = 'author=xp\ \&\\\&123&email=bal@bla'

<	both result in : >

	'xp\ &\&123' and 'bal@bla'

<	Or : >
		let g:xptemplate_vars = exists('g:xptemplate_vars') ? 
			\ g:xptemplate_vars . '&' . '$other=bla'
			\ : '$other=bla'
<	Entries are separated with '&'

	       *XPTCurrentItem*   *XPTIgnoredMark*   *xpt-hl*  *xpt-highlight*
	As you can disable or enable highlight for current editing item, you
	can specify the highlight color.
	In your .vimrc file, Two highlight color can be specified : >
	hi XPTCurrentItem 
		\ctermbg=darkgreen 
		\gui=none guifg=#d59619 guibg=#efdfc1
	hi XPTIgnoredMark 
		\cterm=none term=none ctermbg=black ctermfg=darkgrey 
		\gui=none guifg=#dddddd guibg=white
<	"XPTCurrentItem" is the color of current editing item.
	"XPTIgnoredMark" is the color of mark |`| and |^|.



==============================================================================

							     *xpt-changes-log*
: > <
==== 0.3.7.20 ====
Fixed:2009 May 23	avoiding popup fall back into line complete mode
==== 0.3.7.19 ====
Added:2009 May 23	protect buffer local mapping from being broken by xpt
==== 0.3.7.18 ====
Added:2009 May 23	smart case sensitive matching of template name
Fixed:2009 May 23	map stack bug of failed to backup mapping
Added:2009 May 22	for template name, other keywords can be specified
==== 0.3.7.17 ====
Fixed:2009 May 20	redraw only for language indenting depending on syntax
Fixed:2009 May 18	unescape \XPT in template body
Added:2009 May 18	much more nice template popup hint : longest match, <tab> to trigger template
Fixed:2009 May 17	escaping moved to post-filter phase
Fixed:2009 May 17	select none when popup shown
Fixed:2009 May 17	bug of first line indent
Fixed:2009 May 17	bug of predefined not applying if snippet contains $BRACKETSTYLE.
==== 0.3.7.15 ====
Fixed:2009 May 17	bug of nowrapscan setting causing unexpected expanding.
==== 0.3.7.14 ====
Fixed:2009 May 17	indent problem with perl. caused by perl indent expression.
Fixed:2009 May 16	fix indent for default value and post filter
Added:2009 May 16	multi line XSET : XSETm varname= {lines of codes} XSETm END. Get away annoying "\n"
Fixed:2009 May 16	bug of typing '\' becoming '\\'
==== 0.3.7.13 ====
Added:2009 May 15	fullname and name both for tepmlate functions
Added:2009 May 15	mechanism to expand template in item. 'Trigger("name")'
Fixed:2009 May 15	cursor at last causes it deletes 1 char before.
Fixed:2009 May 14	bug of item edge with default value
Added:2009 May 14	popup hint for item value, which is defined as default
			value returning a list instead of string
Added:2009 May 12	More simple snippet file format
Added:2009 May 11	highlight options
Added:2009 May 10	item edge now can contain \W chars
Fixed:2009 May 09	case bug of popup
Fixed:2009 May 09	bug of laststatus=0 causing cursor limit not working
Fixed:2009 May 09	bug of template range exceeding template end if
			following content contains '^'
Fixed:2009 May 09	On finishing template, unescape bug
Added:2009 May 09	personal variable setting
Added:2009 May 09	navigation key mapping config.
Fixed:2009 May 05	bug that left mark is deleted if touched the previous
			right mark
Fixed:2009 May 05	bug that anonymous item swallow default value.
Fixed:2009 May 05	bug of ';' left if cursor followed by space
Added:2009 May 04	apply predefined in expanded araa
Fixed:2009 May 04	for compatibility, changing vim setting is only affect
			locally
Fixed:2009 May 04	indent bug of indenting make item can not be found
Added:2009 May 03	item edge element
Fixed:2009 May 03	items content does not change if <cr> pressed
Fixed:2009 May 01	items in default value can be selected.
Fixed:2009 May 01	Don't show popup if only 1 key matches
Fixed:2009 May 01	simplify template definition : '..XPT' is no more
			needed.
Fixed:2009 Apr 30	bug of line removed sometimes if folding is enabled
			Thanks to C. Coutinho
Fixed:2009 Apr 30	bug of weird 'cpo' option causes mapping not working
Fixed:2009 Apr 29	bug of formatting line causes line removed. Thanks to 
			C. Coutinho
Fixed:2009 Apr 29	bug of default value at line end. Thanks to C. Coutinho
Added:2009 Apr 29	new command format to define template
Fixed:2009 Apr 27	bug of formatting making template a mess.
Fixed:2009 Apr 27	bug of post-filter value ends with "\n"
Added:2009 Apr 26	nested repetition
Fixed:2009 Apr 26	bug of double escaped '/' when applying predefined.
Added:2009 Apr 25	|xpt-expression| as default value or post filter 
Fixed:2009 Apr 25	statusline reload bug
Added:2009 Apr 23	function arguments
Added:2009 Apr 22	multi repetition part.
Fixed:2009 Apr 22	item at [1, 1] cause crazy behavior. thanks to
			Vincent.B
Fixed:2009 Apr 22	bug that folding causes some text incorrectly deleted
Fixed:2009 Apr 22	bug of cursor stopping 1 char before template end
Added:2009 Apr 22	ocaml snippets thanks to Vincent B.
Fixed:2009 Apr 21	char before template name moved to after template if 
			'virtualedit' is not set with 'onemore'
Fixed:2009 Apr 21	ruler and statusline check.Thanks christian.coutinho
Added:2009 Apr 19	plugin support
Added:2009 Apr 18	delayed default value
Fixed:2009 Apr 18	auto formating causes invalid range
Added:2009 Apr 18	default value can be mixed with variable and function
Added:2009 Apr 18	function can take parameters
Fixed:2009 Apr 18	cursor bug
Fixed:2009 Apr 18	cursor protection bug if item with no content
			some code refinement
Fixed:2009-Apr-16	format overwhelming char next to template
Fixed:2009-Apr-14	escape. at last unescape marks
Fixed:2009-Apr-14	unescape when building positionn list
Added:2009-Apr-14	format as typed
Added:2009-Apr-14	reentering insert mode cancels wrap template
Added:2009-Apr-13	out of item content protection
Fixed:2009-Apr-13	default value for item without name
Fixed:2009-Apr-12	item highlight more precisely
Fixed:2009-Apr-12	to format default value
Fixed:2009-Apr-12	repeatable template bug of escaped char
Added:2009-Apr-12	user defined template generation
Added:2009-Apr-12	on-type high light
Added:2009-Apr-12	hide cursor if only appears at last
Added:2009-Apr-12	repeatable elements `...^
Fixed:2009-Apr-12	bug of '\' in typed content
Fixed:2009-Apr-12	self nested range bug
Fixed:2009-Apr-12	inline template goes to upper line
Fixed:2009-Apr-12	update items as input
Fixed:2009-Apr-11	syntax context sensitive bug
Added:2009-Apr-11	remember alternative value before template rendering
Added:2009-Apr-11	alternative default value
Added:2009-Apr-10	new function and variable interface
Added:2009-Apr-10	zero-width item
Fixed:2009-Apr-10	do not use mark 'O' anymore
Fixed:2009-Apr-10	new function and variable definition format
Added:2009-Apr-10	render template in another tempalte nested template
Added:2009-Apr-09	strip left space for wrapping template
Fixed:2009-Apr-09	0 width content replacing problem
Added:2009-Apr-09	cursor position protect
Fixed:2009-Apr-09	more precise searching range
Added:2009-Mar-27	templating with wrapping
Fixed:2009-Mar-25	typed content with '~' is incorrectly dealed
Fixed:2009-Mar-25	using buffer-scope data to store template data
Added:2009-Mar-25	dealing with escaped template mark character correctly
Added:2009-Mar-19	add common template
Fixed:2009-Mar-17	indent bug
Fixed:2009-Mar-17	format after finishing all types
Added:2009-Mar-16	buffer depended template item mark
Added:2009-03-15	user defined variables and functions in template
Added:2009-03-14	syntax context sensitive template rendering
Fixed:2009-03-03	precise range for typed content
Fixed:2009-02-27	fix select mode mapping
Fixed:2008-06-15	fix the bug of some text being selected at start
Fixed:2008-06-15	bug of cursor at first column not being rendered correctly
Fixed:2008-06-15	fix no item bug.
Added:2008-06-15	add default cursor position at template end
Fixed:2008-06-11	bug of popup menu while no word char under cursor
Fixed:2008-06-11	bug syn highlight not cleared
Fixed:2008-06-11	bug unrecognized item at 1st column
Fixed:2008-06-11	bug first item is in insert mode not select mode
Added:2008-06-10	add tempalte complete popup
Fixed:2008-06-10	use <C-r>= instead of <esc>
Fixed:2008-06-09	move \V to pattern const
Added:2008-06-08	auto clear cursor mark and return to normal insert
Added:2008-06-08	high light cuurent variable
Added:2008-06-08	replace search navigation with search()
Added:2008-06-08	while searching & replace symbel, use very no-magic
Added:2008-06-07	migrated to vim7, use dictionary
Fixed:2008-02-13	bug with folding when template rendered
Added:2008-02-07	predefined functions
Added:2007-08-26	default value
Added:2007-08-26	predefined variables
Added:2007-08-25	cursor position
Fixed:2007-09-19	single character template bug that expanding more than one word
Fixed:2007-09-20	cursor position when no template recognized.
Added:2007-09-20	high light for current item

==============================================================================
vim:tw=78:ts=8:sw=8:sts=8:noet:ft=help:norl:
