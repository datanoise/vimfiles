*XPTemplate*	For Vim version 7.2. Last change: 2009 Apr 16
*xptemplate*
*xpt*


			XP's Snippet Template engine
								    by drdr.xp
							     drdr.xp@gmail.com

	XPTemplate is a Snippet rendering engine.

	|xpt-install|
	|xpt-usage|
		|xpt-personal-var|

	|xpt-feature|
	|xpt-option|
	|xpt-key-bind|  |xpt-mapping|
	|xpt-snippet-syntax|
	|xpt-api|
		|XPTemplate()|		
		|XPTemplateIndent()|	
		|XPTemplateMark()|	
		|XPTcontainer()|	

								 *xpt-install*
	Copy files and directories into one of your |runtimepath|s.

								   *xpt-usage*
	In insert mode type the snippet name and press <C-\> to insert a
	snippet. Use <Tab> to navigate through the snippet template.
	For example when editing a C file : >
		for<C-\>
<	generates : >
		for ( i = 0; i < len; ++i ) {
		    /* cursor */
		}
<	The first "i" being selected is the current item you are editing. "0"
	is the next item and you can navigate to it by pressing <Tab>.

	To change the snippet trigger (<C-\>) see |xpt-key-trigger|, to change
	the navigate key (<Tab>) see |xpt-key-navigate|.

	NOTE with some European keyboards <C-\> does NOT work. In this case
	you need to specify another key to trigger snippets.

	Now type "abc", this result in : >
		for ( abc = 0; abc < len; ++abc ) {
		    /* cursor */
		}
<	Now press <Tab>, the cursor jumps to "0", the next item : >
		for ( abc = 0; abc < len; ++abc ) {
		    /* cursor */
		}
<	After pressing <Tab> two more times the snippet mode stops and
	cursor ends at line 2, column 4: >
		for ( abc = 0; abc < len; ++abc ) {
		    
		}

<	The usage is described in more detail below.

								 *xpt-feature*
	Live typing update
	Navigate forward and backward		|xpt-key-navigate|
	Popup hint				|xpt-popup| |xpt-snippet-hint|
	Ordered place holders			|xpt-snippet-ComeFist|
	Embedded functions and variables	|xpt-snippet-function|
	Repeatable snippet generation		|xpt-repetition|
	Nested snippet				|xpt-nested|
	Wrapping snippet			|xpt-wrapped|
	Inclusion on snippet level or file level|xpt-snippet-include| 
						|xpt-snippet-XPTinclude|
	Template priority			|xpt-snippet-priority|

	Named item or anonymous item		|xpt-snippet-item|
	Default value                 		|xpt-snippet-default-value|
	Preset  value                 		|xpt-preset-value|
	and more...

								   *xpt-popup*
	If you type nothing or an incomplete snippet key and press <C-\>, a
	popup menu shows up listing all possible snippet keys. For example : >
		fo<C-\>
<	Shows : >
		for
		forever
		fornn
		forr
<
	After selecting the item from the popup menu, press <C-\> again to
	trigger the snippet.

							      *xpt-nested*
	Template can be expanded inside another template. There is no
	difference between using a nested template or a top-level template.
	For example, when you edit xp.c. Type switch<C-\> to generate a switch
	block template: >
		switch (fn) {
		  case 0 :
			<--------------cursor stops here
		    break;
		    `...^
		  default:
			`^
		}
<	Now the cursor stops between "case 0 :" and "break;", type : >
		if<C-\>
<	It becomes : >
		switch (fn) {		| upper level snippet
		  case 0 :		|
		    if (){		. nested snippet
		      `cursor^		.
		    }			.
		    break;		| upper level snippet
		    `...^               |
		  default:              |
			`^              |
		}                       |
<	Type <Tab>, <Tab>.. to navigate out of the nested snippet : >
		switch ("xp.c" == fn) {
		  case 0 :
		    if (){

		    }
		    break;

		  default:
			<--------------cursor stops here
		}
<	Now cursor stops after "default:", and we get out back to the "switch"
	snippet

==============================================================================


				      *`...^*    *xpt-...*    *xpt-repetition*
	Some segment can be defined as repeatable, for example the "case"s in
	"switch". To specify the repetition part is easy, just wrap the part
	you want it to repeat with `...n^. n is a number and can be omitted.
	Take the case from "switch": >
		call XPTemplate('switch', [
		      \ 'switch (`^) {',
		      \ '  `...^',            | repetition part
		      \ '  case `^0^ :',      |
		      \ '    `^',             |
		      \ '    break;',         |
		      \ '  `...^',            |
		      \ '',
		      \ '  default:',
		      \ '    `^',
		      \ '}'
		      \])
<
	When you trigger a repetition template it works as below : >
		switch () {    <------- cursor stays here
		  `...^

		  default:
		      `^
		}
<	Press <Tab>, the |`...^| is selected. Press <Tab> again to expand the
	repetition part. Or press <Cr> |xpt-key-clear| to cancel the
	repetition part. These 4 lines are expanded : >
		switch () {

		  case `17^ :       | expanded
		    `^              |
			break;      |
		    `...^           |

		  default:
			`^
		}
<	Enter the repetition part. You may have noticed there is another
	|`...^|, that is the another repeat trigger.

	Press <Tab> 3 times : >
		switch () {

		  case 0 :

		    break;

		  case `20^ :      | selected repetition part
		    `^             |
			break;     |
		    `...^          |

		  default:
			`^
		}
<
	Using the n in |`...^| with different numbers allows you define
	multiple repetition parts in one snippet : >
		call XPTemplate( "tryof", [
		      \ "try `what^",
		      \ "   `pattern^ ->",
		      \ "       `body^ `...0^;",
		      \ "   `patternn^ ->",     
		      \ "       `bodyn^`...0^",  
		      \ "catch",
		      \ "    `excep^ -> `toRet^ `...1^;",
		      \ "    `except^ -> `toRet^`...1^", 
		      \ "end `cursor^",
		      \ "" ] )
<
	Repetition parts can NOW be recursively defined. See *.html "table2"
	snippet : >
		call XPTemplate('table2', [
		      \ '<table>',
		      \ '  <tr>',
		      \ '    <td>`text^^</td>`...2^', 
		      \ '    <td>`text^^</td>`...2^', 
		      \ '  </tr>`...0^', 
		      \ '  <tr>',
		      \ '    <td>`text^^</td>`...1^', 
		      \ '    <td>`text^^</td>`...1^', 
		      \ '  </tr>`...0^', 
		      \ '</table>'
		      \])
<
	See also |xpt-snippet-repetition|.

								 *xpt-wrapped*
	Wrapper snippets can only be triggered in visual mode, the place
	holder `wrapped^ is replaced with the text selected in visual mode.
	For instance the following snippet : >
		XPT call_ hint=..(\ SEL\ )
		`name^(`wrapped^`, `^)`cursor^
<	Use |V| to select some text, press <C-\> |v_CTRL-\|. The selected text
	is yanked and removed and a popup menu appears for selecting snippet
	name.
	With this example line: >
		a, b
<	Press V to select the line, press <C-\>, select call_" in the popup
	and the result is : >
		name(a, b)
<	
								 *xpt-context*
	You can define snippets that can only be triggered in certain
	circumstances, for example in certain syntax items. Defining context
	depended snippets is done by adding another parameter to the
	XPTemplate call "{'syn' : 'the context name'}" : >
		call XPTemplate("para", {'syn' : 'comment'}, "
			\@param {`Object^} `name^ `desc^")
<	Now the snippet "para" can be only triggered in syntax items named
	"comment".

==============================================================================

				    *xpt-mapping*  *xpt-key-bind* *xpt-option*
	Options can be set in |.vimrc| to modify XPTemplate's behaviors.

							*i_CTRL-\*  *v_CTRL-\*
							     *xpt-key-trigger*  
							    *g:xptemplate_key*
							       {default:<C-\>}
	The key to trigger snippets, in insert or visual mode.
	Use |g:xptemplate_key| to change this mapping.

							  *i_<tab>*  *s_<tab>*
							    *xpt-key-navigate*   
						       *g:xptemplate_nav_next*
							       {default:<Tab>}
	After a snippet was triggered, this key navigates to the next item.
	Use |g:xptemplate_nav_next| to change this mapping.

						      *i_<S-tab>*  *s_<S-tab>*
						       *g:xptemplate_nav_prev*
							     {default:<S-Tab>}
	After a snippet was triggered, press this key to navigate back to the
	previous item.
	Use |g:xptemplate_nav_prev| to change this mapping.

						     *s_<CR>*  *xpt-key-clear*
						     *g:xptemplate_nav_cancel*
								{default:<Cr>}
	Press to clear current place holder and jump to next.
	Use |g:xptemplate_nav_cancel| to change this mapping.

								    *s_CTRL-l*
							  *xpt-key-goto-right*
						       *g:xptemplate_to_right*
							     {default:"<C-l>"}
	When a place holder is initially selected jump to the end of current
	place holder and go to insert mode.
	Use |g:xptemplate_to_right| to change this mapping. Example : >
		let g:xptemplate_to_right = '<C-l>'
<
								     *n_<C-g>*
							      *xpt-key-goback*
							 *g:xptemplate_goback*
							       {default:<C-g>}
	Go back to current place holder and to insert mode.
	Use |g:xptemplate_goback| to change this mapping.


==============================================================================

					    *g:xptemplate_ph_pum_accept_empty*
								   {default:0}
	When set to 1 popup menu for place holders accepts an empty input. So
	when nothing typed pressing <Tab> closes the popup menu and sends the
	cursor to next place holder.
	When not set <Tab> expands text to longest and keeps popup menu open.

						     *g:xptemplate_strip_left*
								   {default:1}
	When set to 1 wrapping snippets |xpt-wrapped| remove space before the
	line.

				      *xpt-personal-var*   *g:xptemplate_vars*
	g:xptemplate_vars sets personal information variables used in
	snippets, like "author" and "email". see |xpt-snippet-variable|.
	Variables set with g:xptemplate_vars have the highest priority and
	override any other variables set in *.xpt.vim. Syntax : >
	let g:xptemplate_vars = 'name=value&name=value...'
<	Example : >
	let g:xptemplate_vars = '$author=xp\ \&\\\&123&$email=bal@bla'
	let g:xptemplate_vars = 'author=xp\ \&\\\&123&email=bal@bla'

<	both result in : >

	'xp\ &\&123' and 'bal@bla'

<	Or : >
		let g:xptemplate_vars = exists('g:xptemplate_vars') ? 
			\ g:xptemplate_vars . '&' . '$other=bla'
			\ : '$other=bla'
<
	Entries are separated with '&'.



==============================================================================

							     *xpt-changes-log*
: > <
==== 0.3.7.21 ====
Added:2009 Jun 01       XPTreload command to reload all snippets to current buffer.
Added:2009 May 29	standalone popup plugin.
==== 0.3.7.20 ====
Fixed:2009 May 23	avoiding popup fall back into line complete mode
==== 0.3.7.19 ====
Added:2009 May 23	protect buffer local mapping from being broken by xpt
==== 0.3.7.18 ====
Added:2009 May 23	smart case sensitive matching of snippet name
Fixed:2009 May 23	map stack bug of failed to backup mapping
Added:2009 May 22	for snippet name, other keywords can be specified
==== 0.3.7.17 ====
Fixed:2009 May 20	redraw only for language indenting depending on syntax
Fixed:2009 May 18	unescape \XPT in snippet body
Added:2009 May 18	much more nice snippet popup hint : longest match, <tab> to trigger snippet
Fixed:2009 May 17	escaping moved to post-filter phase
Fixed:2009 May 17	select none when popup shown
Fixed:2009 May 17	bug of first line indent
Fixed:2009 May 17	bug of predefined not applying if snippet contains $BRACKETSTYLE.
==== 0.3.7.15 ====
Fixed:2009 May 17	bug of nowrapscan setting causing unexpected expanding.
==== 0.3.7.14 ====
Fixed:2009 May 17	indent problem with perl. caused by perl indent expression.
Fixed:2009 May 16	fix indent for default value and post filter
Added:2009 May 16	multi line XSET : XSETm varname= {lines of codes} XSETm END. Get away annoying "\n"
Fixed:2009 May 16	bug of typing '\' becoming '\\'
==== 0.3.7.13 ====
Added:2009 May 15	fullname and name both for tepmlate functions
Added:2009 May 15	mechanism to expand snippet in item. 'Trigger("name")'
Fixed:2009 May 15	cursor at last causes it deletes 1 char before.
Fixed:2009 May 14	bug of item edge with default value
Added:2009 May 14	popup hint for item value, which is defined as default
			value returning a list instead of string
Added:2009 May 12	More simple snippet file format
Added:2009 May 11	highlight options
Added:2009 May 10	item edge now can contain \W chars
Fixed:2009 May 09	case bug of popup
Fixed:2009 May 09	bug of laststatus=0 causing cursor limit not working
Fixed:2009 May 09	bug of snippet range exceeding snippet end if
			following content contains '^'
Fixed:2009 May 09	On finishing template, unescape bug
Added:2009 May 09	personal variable setting
Added:2009 May 09	navigation key mapping config.
Fixed:2009 May 05	bug that left mark is deleted if touched the previous
			right mark
Fixed:2009 May 05	bug that anonymous item swallow default value.
Fixed:2009 May 05	bug of ';' left if cursor followed by space
Added:2009 May 04	apply predefined in expanded araa
Fixed:2009 May 04	for compatibility, changing vim setting is only affect
			locally
Fixed:2009 May 04	indent bug of indenting make item can not be found
Added:2009 May 03	item edge element
Fixed:2009 May 03	items content does not change if <cr> pressed
Fixed:2009 May 01	items in default value can be selected.
Fixed:2009 May 01	Don't show popup if only 1 key matches
Fixed:2009 May 01	simplify snippet definition : '..XPT' is no more
			needed.
Fixed:2009 Apr 30	bug of line removed sometimes if folding is enabled
			Thanks to C. Coutinho
Fixed:2009 Apr 30	bug of weird 'cpo' option causes mapping not working
Fixed:2009 Apr 29	bug of formatting line causes line removed. Thanks to 
			C. Coutinho
Fixed:2009 Apr 29	bug of default value at line end. Thanks to C. Coutinho
Added:2009 Apr 29	new command format to define snippet
Fixed:2009 Apr 27	bug of formatting making snippet a mess.
Fixed:2009 Apr 27	bug of post-filter value ends with "\n"
Added:2009 Apr 26	nested repetition
Fixed:2009 Apr 26	bug of double escaped '/' when applying predefined.
Added:2009 Apr 25	|xpt-expression| as default value or post filter 
Fixed:2009 Apr 25	statusline reload bug
Added:2009 Apr 23	function arguments
Added:2009 Apr 22	multi repetition part.
Fixed:2009 Apr 22	item at [1, 1] cause crazy behavior. thanks to
			Vincent.B
Fixed:2009 Apr 22	bug that folding causes some text incorrectly deleted
Fixed:2009 Apr 22	bug of cursor stopping 1 char before snippet end
Added:2009 Apr 22	ocaml snippets thanks to Vincent B.
Fixed:2009 Apr 21	char before snippet name moved to after snippet if 
			'virtualedit' is not set with 'onemore'
Fixed:2009 Apr 21	ruler and statusline check.Thanks christian.coutinho
Added:2009 Apr 19	plugin support
Added:2009 Apr 18	delayed default value
Fixed:2009 Apr 18	auto formating causes invalid range
Added:2009 Apr 18	default value can be mixed with variable and function
Added:2009 Apr 18	function can take parameters
Fixed:2009 Apr 18	cursor bug
Fixed:2009 Apr 18	cursor protection bug if item with no content
			some code refinement
Fixed:2009-Apr-16	format overwhelming char next to snippet
Fixed:2009-Apr-14	escape. at last unescape marks
Fixed:2009-Apr-14	unescape when building positionn list
Added:2009-Apr-14	format as typed
Added:2009-Apr-14	reentering insert mode cancels wrap snippet
Added:2009-Apr-13	out of item content protection
Fixed:2009-Apr-13	default value for item without name
Fixed:2009-Apr-12	item highlight more precisely
Fixed:2009-Apr-12	to format default value
Fixed:2009-Apr-12	repetition snippet bug of escaped char
Added:2009-Apr-12	user defined snippet generation
Added:2009-Apr-12	on-type high light
Added:2009-Apr-12	hide cursor if only appears at last
Added:2009-Apr-12	repetition elements `...^
Fixed:2009-Apr-12	bug of '\' in typed content
Fixed:2009-Apr-12	self nested range bug
Fixed:2009-Apr-12	inline snippet goes to upper line
Fixed:2009-Apr-12	update items as input
Fixed:2009-Apr-11	syntax context sensitive bug
Added:2009-Apr-11	remember alternative value before snippet rendering
Added:2009-Apr-11	alternative default value
Added:2009-Apr-10	new function and variable interface
Added:2009-Apr-10	zero-width item
Fixed:2009-Apr-10	do not use mark 'O' anymore
Fixed:2009-Apr-10	new function and variable definition format
Added:2009-Apr-10	render snippet in another tempalte nested snippet
Added:2009-Apr-09	strip left space for wrapping snippet
Fixed:2009-Apr-09	0 width content replacing problem
Added:2009-Apr-09	cursor position protect
Fixed:2009-Apr-09	more precise searching range
Added:2009-Mar-27	templating with wrapping
Fixed:2009-Mar-25	typed content with '~' is incorrectly dealed
Fixed:2009-Mar-25	using buffer-scope data to store snippet data
Added:2009-Mar-25	dealing with escaped snippet mark character correctly
Added:2009-Mar-19	add common snippet
Fixed:2009-Mar-17	indent bug
Fixed:2009-Mar-17	format after finishing all types
Added:2009-Mar-16	buffer depended snippet item mark
Added:2009-03-15	user defined variables and functions in snippet
Added:2009-03-14	syntax context sensitive snippet rendering
Fixed:2009-03-03	precise range for typed content
Fixed:2009-02-27	fix select mode mapping
Fixed:2008-06-15	fix the bug of some text being selected at start
Fixed:2008-06-15	bug of cursor at first column not being rendered correctly
Fixed:2008-06-15	fix no item bug.
Added:2008-06-15	add default cursor position at snippet end
Fixed:2008-06-11	bug of popup menu while no word char under cursor
Fixed:2008-06-11	bug syn highlight not cleared
Fixed:2008-06-11	bug unrecognized item at 1st column
Fixed:2008-06-11	bug first item is in insert mode not select mode
Added:2008-06-10	add tempalte complete popup
Fixed:2008-06-10	use <C-r>= instead of <esc>
Fixed:2008-06-09	move \V to pattern const
Added:2008-06-08	auto clear cursor mark and return to normal insert
Added:2008-06-08	high light cuurent variable
Added:2008-06-08	replace search navigation with search()
Added:2008-06-08	while searching & replace symbel, use very no-magic
Added:2008-06-07	migrated to vim7, use dictionary
Fixed:2008-02-13	bug with folding when snippet rendered
Added:2008-02-07	predefined functions
Added:2007-08-26	default value
Added:2007-08-26	predefined variables
Added:2007-08-25	cursor position
Fixed:2007-09-19	single character snippet bug that expanding more than one word
Fixed:2007-09-20	cursor position when no snippet recognized.
Added:2007-09-20	high light for current item

==============================================================================
" vim:tw=78:ts=8:sw=8:sts=8:noet:ft=help:norl:
